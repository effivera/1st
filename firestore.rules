/**
 * @file Firestore Security Rules for Effivera Platform
 * @version Prototyping Mode - Data shape is not enforced.
 *
 * @description This ruleset enforces a user-ownership model for data access in the Effivera platform.
 * All data is stored in top-level collections: /users/{userId}, /equipment/{equipmentId}, /bookings/{bookingId}, /produceListings/{listingId}, and /carbonCredits/{carbonCreditId}.
 *
 * Core Philosophy: Strict user ownership for writes. Public read access where appropriate, restricted to authenticated users or all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /equipment/{equipmentId}: Stores equipment listings. Accessible for read by all, but create/update/delete restricted to the equipment owner.
 * - /bookings/{bookingId}: Stores booking information. Accessible for read by all, but create/update/delete restricted to the equipment owner and the farmer who made the booking.
 * - /produceListings/{listingId}: Stores produce listings. Accessible for read by all, but create/update/delete restricted to the farmer who created the listing.
 * - /carbonCredits/{carbonCreditId}: Stores carbon credit information. Accessible for read and write only by the user themselves.
 *
 * Key Security Decisions:
 * - No global admin roles are defined. All authorization is based on user ownership.
 * - User listing is explicitly denied.
 * - Data shape is not validated during this prototyping phase except for fields required for authorization.
 * - All write operations require authentication.
 * - Public read access is granted to /equipment, /bookings, and /produceListings to facilitate discovery. Writes are controlled via the ownerId field.
 *
 * Denormalization for Authorization: The `ownerId` (or `farmerId`) field is included in /equipment, /bookings, and /produceListings documents to enable ownership-based security rules without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching {userId}. Example: request.auth.uid == 'user123' creating /users/user123.
     * @allow (get, update, delete) - Authenticated user accessing their own profile. Example: request.auth.uid == 'user123' accessing /users/user123.
     * @deny (create) - Authenticated user attempting to create a profile with a mismatched {userId}. Example: request.auth.uid == 'user456' creating /users/user123.
     * @deny (get, update, delete) - Authenticated user attempting to access another user's profile. Example: request.auth.uid == 'user456' accessing /users/user123.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces strict document ownership, restricting access to a user's own data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages equipment listings, allowing public read access but restricting write access to the equipment owner.
     * @path /equipment/{equipmentId}
     * @allow (get, list) - Any user can read equipment listings.
     * @allow (create) - Authenticated user creating a listing with their UID as the ownerId. Example: request.auth.uid == 'user123' creating an equipment listing with ownerId: 'user123'.
     * @allow (update, delete) - Authenticated user who owns the equipment listing. Example: request.auth.uid == 'user123' updating/deleting an equipment listing with ownerId: 'user123'.
     * @deny (create) - Authenticated user attempting to create a listing with a mismatched ownerId. Example: request.auth.uid == 'user456' creating an equipment listing with ownerId: 'user123'.
     * @deny (update, delete) - Authenticated user attempting to modify/delete another user's equipment listing. Example: request.auth.uid == 'user456' updating/deleting an equipment listing with ownerId: 'user123'.
     * @principle Allows public read access for discovery while enforcing document ownership for writes.
     */
    match /equipment/{equipmentId} {
      // Helper function to check if the user is signed in and owns the equipment.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages bookings, allowing public read access but restricting write access to the equipment owner and the farmer who made the booking.
     * @path /bookings/{bookingId}
     * @allow (get, list) - Any user can read booking information.
     * @allow (create) - Authenticated user creating a booking with their UID as either the farmerId or the ownerId.
     * @allow (update, delete) - Authenticated user who is either the farmer or the owner of the booking.
     * @deny (create) - Authenticated user attempting to create a booking with mismatched farmerId and ownerId.
     * @deny (update, delete) - Authenticated user attempting to modify/delete a booking they don't own.
     * @principle Allows public read access while enforcing document ownership for writes, considering both the farmer and the equipment owner.
     */
    match /bookings/{bookingId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      // Helper function to check if the user is the farmer who made the booking or the owner of the equipment.
      function isFarmerOrOwner(farmerId, ownerId) {
        return request.auth.uid == farmerId || request.auth.uid == ownerId;
      }
      function isExistingFarmerOrOwner(farmerId, ownerId) {
          return isFarmerOrOwner(farmerId, ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isFarmerOrOwner(request.resource.data.farmerId, request.resource.data.ownerId);
      allow update: if isExistingFarmerOrOwner(resource.data.farmerId, resource.data.ownerId) && request.resource.data.farmerId == resource.data.farmerId && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingFarmerOrOwner(resource.data.farmerId, resource.data.ownerId);
    }

    /**
     * @description Manages produce listings, allowing public read access but restricting write access to the farmer who created the listing.
     * @path /produceListings/{listingId}
     * @allow (get, list) - Any user can read produce listings.
     * @allow (create) - Authenticated user creating a listing with their UID as the farmerId.
     * @allow (update, delete) - Authenticated user who owns the produce listing.
     * @deny (create) - Authenticated user attempting to create a listing with a mismatched farmerId.
     * @deny (update, delete) - Authenticated user attempting to modify/delete another user's produce listing.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /produceListings/{listingId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      // Helper function to check if the user is the farmer who owns the listing.
      function isOwner(farmerId) {
        return request.auth.uid == farmerId;
      }
      function isExistingOwner(farmerId) {
          return isOwner(farmerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.farmerId);
      allow update: if isExistingOwner(resource.data.farmerId) && request.resource.data.farmerId == resource.data.farmerId;
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Manages carbon credit information, ensuring only the user can read or write their own credits.
     * @path /carbonCredits/{carbonCreditId}
     * @allow (create) - Authenticated user with matching {carbonCreditId} (which should be the userId).
     * @allow (get, update, delete) - Authenticated user accessing their own carbon credit information.
     * @deny (create) - Authenticated user attempting to create carbon credits for another user.
     * @deny (get, update, delete) - Authenticated user attempting to access another user's carbon credit information.
     * @deny (list) - Listing all carbon credits is not permitted.
     * @principle Enforces strict document ownership, restricting access to a user's own carbon credit data.
     */
    match /carbonCredits/{carbonCreditId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      // Helper function to check if the user owns the carbon credits (userId matches the document ID).
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(carbonCreditId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(carbonCreditId) && request.resource.data.userId == carbonCreditId;
      allow update: if isExistingOwner(carbonCreditId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(carbonCreditId);
    }
  }
}